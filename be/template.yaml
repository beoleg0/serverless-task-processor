AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: nodejs20.x
    Environment:
      Variables:
        TASKS_TABLE: !Ref TasksTable
        TASK_QUEUE_URL: !Ref TaskQueue
        TASK_DLQ_URL: !Ref TaskDeadLetterQueue

Resources:
  # Add this to your template.yaml
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Common dependencies
      ContentUri: ./layer
      CompatibleRuntimes:
        - nodejs20.x

  # API Gateway for RESTful endpoints
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

  # DynamoDB Tables
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TasksTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # SQS Queues
  TaskDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TaskDeadLetterQueue
      MessageRetentionPeriod: 1209600  # 14 days (maximum)

  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TaskQueue
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TaskDeadLetterQueue.Arn
        maxReceiveCount: 2  # After 2 retries, send to DLQ

  # Lambda API Functions
  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/api/
      Handler: createTask.handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TaskQueue.QueueName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks
            Method: post

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/api/
      Handler: getTasks.handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks
            Method: get

  # Lambda Processing Functions
  ProcessTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/processing/
      Handler: processTask.handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TaskQueue.QueueName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TaskQueue.Arn
            BatchSize: 1

  DlqProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/functions/processing/
      Handler: dlqProcessor.handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt TaskDeadLetterQueue.QueueName
        - CloudWatchLogsFullAccess
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TaskDeadLetterQueue.Arn
            BatchSize: 1

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  TasksTable:
    Description: "DynamoDB table for tasks"
    Value: !Ref TasksTable
  TaskQueue:
    Description: "SQS queue for task processing"
    Value: !Ref TaskQueue
  TaskDeadLetterQueue:
    Description: "SQS dead letter queue for failed tasks"
    Value: !Ref TaskDeadLetterQueue
